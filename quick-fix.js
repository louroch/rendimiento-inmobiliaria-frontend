/**
 * üöÄ SCRIPT DE VERIFICACI√ìN R√ÅPIDA Y SOLUCI√ìN
 * 
 * Este script verifica si los cambios est√°n desplegados y sugiere soluciones.
 */

console.log('üîç VERIFICACI√ìN R√ÅPIDA DEL SISTEMA');
console.log('=' .repeat(50));

// Verificar si estamos en la p√°gina correcta
function checkPage() {
  const url = window.location.href;
  console.log('üìç URL actual:', url);
  
  const isCorrectPage = url.includes('nuevo-registro') || 
                       url.includes('new-record') ||
                       url.includes('localhost:3000');
  
  if (!isCorrectPage) {
    console.log('‚ùå PROBLEMA: No est√°s en la p√°gina correcta');
    console.log('üí° SOLUCI√ìN: Ve a http://localhost:3000/nuevo-registro');
    return false;
  }
  
  console.log('‚úÖ P√°gina correcta');
  return true;
}

// Verificar si el formulario existe
function checkForm() {
  const form = document.querySelector('form');
  if (!form) {
    console.log('‚ùå PROBLEMA: No se encontr√≥ el formulario');
    console.log('üí° SOLUCI√ìN: Aseg√∫rate de estar en la p√°gina de nuevo registro');
    return false;
  }
  
  console.log('‚úÖ Formulario encontrado');
  return true;
}

// Verificar campos nuevos
function checkNewFields() {
  const newFields = [
    'cantidadPropiedadesTokko',
    'linksTokko',
    'dificultadTokko',
    'detalleDificultadTokko',
    'observaciones'
  ];
  
  console.log('üîç Verificando campos nuevos...');
  
  const foundFields = [];
  const missingFields = [];
  
  newFields.forEach(fieldName => {
    const field = document.querySelector(`[name="${fieldName}"]`);
    if (field) {
      foundFields.push(fieldName);
      console.log(`  ‚úÖ ${fieldName}`);
    } else {
      missingFields.push(fieldName);
      console.log(`  ‚ùå ${fieldName}`);
    }
  });
  
  console.log(`\nüìä Resultado: ${foundFields.length}/${newFields.length} campos encontrados`);
  
  if (missingFields.length > 0) {
    console.log('\n‚ùå PROBLEMA: Los campos nuevos no est√°n presentes');
    console.log('üí° POSIBLES CAUSAS:');
    console.log('   1. Los cambios no se han desplegado correctamente');
    console.log('   2. Hay un error de compilaci√≥n que impide el renderizado');
    console.log('   3. Est√°s viendo una versi√≥n en cach√©');
    
    console.log('\nüîß SOLUCIONES:');
    console.log('   1. Verifica que el servidor est√© corriendo: npm start');
    console.log('   2. Limpia la cach√© del navegador: Ctrl+Shift+R');
    console.log('   3. Verifica la consola para errores de JavaScript');
    console.log('   4. Aseg√∫rate de que el archivo NewRecord.tsx tenga los cambios');
    
    return false;
  }
  
  console.log('‚úÖ Todos los campos nuevos est√°n presentes');
  return true;
}

// Verificar si hay errores de JavaScript
function checkErrors() {
  console.log('üîç Verificando errores...');
  
  // Verificar si hay errores en la consola
  const hasErrors = window.console && window.console.error;
  
  if (hasErrors) {
    console.log('‚ö†Ô∏è  Revisa la consola para errores de JavaScript');
  } else {
    console.log('‚úÖ No se detectaron errores obvios');
  }
}

// Funci√≥n principal de verificaci√≥n
function quickCheck() {
  console.log('Iniciando verificaci√≥n r√°pida...\n');
  
  const checks = {
    page: checkPage(),
    form: checkForm(),
    newFields: checkNewFields(),
    errors: checkErrors()
  };
  
  const passedChecks = Object.values(checks).filter(Boolean).length;
  const totalChecks = Object.keys(checks).length;
  
  console.log('\nüìä RESUMEN DE VERIFICACI√ìN');
  console.log('=' .repeat(50));
  console.log(`P√°gina correcta: ${checks.page ? '‚úÖ' : '‚ùå'}`);
  console.log(`Formulario encontrado: ${checks.form ? '‚úÖ' : '‚ùå'}`);
  console.log(`Campos nuevos: ${checks.newFields ? '‚úÖ' : '‚ùå'}`);
  console.log(`Sin errores: ${checks.errors ? '‚úÖ' : '‚ùå'}`);
  
  console.log(`\nüéØ Resultado: ${passedChecks}/${totalChecks} verificaciones pasaron`);
  
  if (passedChecks === totalChecks) {
    console.log('üéâ ¬°Todo est√° funcionando correctamente!');
    console.log('üí° Si a√∫n tienes problemas, ejecuta las pruebas detalladas.');
  } else {
    console.log('‚ö†Ô∏è  Hay problemas que necesitan soluci√≥n.');
    console.log('üí° Sigue las sugerencias arriba para resolverlos.');
  }
  
  return checks;
}

// Ejecutar verificaci√≥n autom√°ticamente
quickCheck();

// Exportar funci√≥n
window.quickCheck = quickCheck;
